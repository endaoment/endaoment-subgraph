// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class NdaoEntity extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NdaoEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type NdaoEntity must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NdaoEntity", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): NdaoEntity | null {
    return changetype<NdaoEntity | null>(
      store.get("NdaoEntity", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get entityType(): string {
    let value = this.get("entityType");
    return value!.toString();
  }

  set entityType(value: string) {
    this.set("entityType", Value.fromString(value));
  }

  get ein(): string | null {
    let value = this.get("ein");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set ein(value: string | null) {
    if (!value) {
      this.unset("ein");
    } else {
      this.set("ein", Value.fromString(<string>value));
    }
  }

  get entityManager(): Bytes {
    let value = this.get("entityManager");
    return value!.toBytes();
  }

  set entityManager(value: Bytes) {
    this.set("entityManager", Value.fromBytes(value));
  }

  get recognizedUsdcBalance(): BigInt {
    let value = this.get("recognizedUsdcBalance");
    return value!.toBigInt();
  }

  set recognizedUsdcBalance(value: BigInt) {
    this.set("recognizedUsdcBalance", Value.fromBigInt(value));
  }

  get totalUsdcDonationsReceived(): BigInt {
    let value = this.get("totalUsdcDonationsReceived");
    return value!.toBigInt();
  }

  set totalUsdcDonationsReceived(value: BigInt) {
    this.set("totalUsdcDonationsReceived", Value.fromBigInt(value));
  }

  get totalUsdcDonationFees(): BigInt {
    let value = this.get("totalUsdcDonationFees");
    return value!.toBigInt();
  }

  set totalUsdcDonationFees(value: BigInt) {
    this.set("totalUsdcDonationFees", Value.fromBigInt(value));
  }

  get totalUsdcGrantsReceived(): BigInt {
    let value = this.get("totalUsdcGrantsReceived");
    return value!.toBigInt();
  }

  set totalUsdcGrantsReceived(value: BigInt) {
    this.set("totalUsdcGrantsReceived", Value.fromBigInt(value));
  }

  get totalUsdcGrantInFees(): BigInt {
    let value = this.get("totalUsdcGrantInFees");
    return value!.toBigInt();
  }

  set totalUsdcGrantInFees(value: BigInt) {
    this.set("totalUsdcGrantInFees", Value.fromBigInt(value));
  }

  get totalUsdcContributionsReceived(): BigInt {
    let value = this.get("totalUsdcContributionsReceived");
    return value!.toBigInt();
  }

  set totalUsdcContributionsReceived(value: BigInt) {
    this.set("totalUsdcContributionsReceived", Value.fromBigInt(value));
  }

  get totalUsdcContributionFees(): BigInt {
    let value = this.get("totalUsdcContributionFees");
    return value!.toBigInt();
  }

  set totalUsdcContributionFees(value: BigInt) {
    this.set("totalUsdcContributionFees", Value.fromBigInt(value));
  }

  get totalUsdcTransfersReceived(): BigInt {
    let value = this.get("totalUsdcTransfersReceived");
    return value!.toBigInt();
  }

  set totalUsdcTransfersReceived(value: BigInt) {
    this.set("totalUsdcTransfersReceived", Value.fromBigInt(value));
  }

  get totalUsdcTransferInFees(): BigInt {
    let value = this.get("totalUsdcTransferInFees");
    return value!.toBigInt();
  }

  set totalUsdcTransferInFees(value: BigInt) {
    this.set("totalUsdcTransferInFees", Value.fromBigInt(value));
  }

  get totalUsdcMigrated(): BigInt {
    let value = this.get("totalUsdcMigrated");
    return value!.toBigInt();
  }

  set totalUsdcMigrated(value: BigInt) {
    this.set("totalUsdcMigrated", Value.fromBigInt(value));
  }

  get totalUsdcReceived(): BigInt {
    let value = this.get("totalUsdcReceived");
    return value!.toBigInt();
  }

  set totalUsdcReceived(value: BigInt) {
    this.set("totalUsdcReceived", Value.fromBigInt(value));
  }

  get totalUsdcReceivedFees(): BigInt {
    let value = this.get("totalUsdcReceivedFees");
    return value!.toBigInt();
  }

  set totalUsdcReceivedFees(value: BigInt) {
    this.set("totalUsdcReceivedFees", Value.fromBigInt(value));
  }

  get totalUsdcGrantedOut(): BigInt {
    let value = this.get("totalUsdcGrantedOut");
    return value!.toBigInt();
  }

  set totalUsdcGrantedOut(value: BigInt) {
    this.set("totalUsdcGrantedOut", Value.fromBigInt(value));
  }

  get totalUsdcGrantedOutFees(): BigInt {
    let value = this.get("totalUsdcGrantedOutFees");
    return value!.toBigInt();
  }

  set totalUsdcGrantedOutFees(value: BigInt) {
    this.set("totalUsdcGrantedOutFees", Value.fromBigInt(value));
  }

  get totalUsdcTransferredOut(): BigInt {
    let value = this.get("totalUsdcTransferredOut");
    return value!.toBigInt();
  }

  set totalUsdcTransferredOut(value: BigInt) {
    this.set("totalUsdcTransferredOut", Value.fromBigInt(value));
  }

  get totalUsdcTransferredOutFees(): BigInt {
    let value = this.get("totalUsdcTransferredOutFees");
    return value!.toBigInt();
  }

  set totalUsdcTransferredOutFees(value: BigInt) {
    this.set("totalUsdcTransferredOutFees", Value.fromBigInt(value));
  }

  get totalUsdcPaidOut(): BigInt {
    let value = this.get("totalUsdcPaidOut");
    return value!.toBigInt();
  }

  set totalUsdcPaidOut(value: BigInt) {
    this.set("totalUsdcPaidOut", Value.fromBigInt(value));
  }

  get totalUsdcPaidOutFees(): BigInt {
    let value = this.get("totalUsdcPaidOutFees");
    return value!.toBigInt();
  }

  set totalUsdcPaidOutFees(value: BigInt) {
    this.set("totalUsdcPaidOutFees", Value.fromBigInt(value));
  }

  get initialized(): boolean {
    let value = this.get("initialized");
    return value!.toBoolean();
  }

  set initialized(value: boolean) {
    this.set("initialized", Value.fromBoolean(value));
  }

  get investedUsdc(): BigInt {
    let value = this.get("investedUsdc");
    return value!.toBigInt();
  }

  set investedUsdc(value: BigInt) {
    this.set("investedUsdc", Value.fromBigInt(value));
  }

  get positions(): Array<string> {
    let value = this.get("positions");
    return value!.toStringArray();
  }

  set positions(value: Array<string>) {
    this.set("positions", Value.fromStringArray(value));
  }
}

export class PortfolioPosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PortfolioPosition entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PortfolioPosition must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PortfolioPosition", id.toString(), this);
    }
  }

  static load(id: string): PortfolioPosition | null {
    return changetype<PortfolioPosition | null>(
      store.get("PortfolioPosition", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get entity(): Bytes {
    let value = this.get("entity");
    return value!.toBytes();
  }

  set entity(value: Bytes) {
    this.set("entity", Value.fromBytes(value));
  }

  get portfolio(): Bytes {
    let value = this.get("portfolio");
    return value!.toBytes();
  }

  set portfolio(value: Bytes) {
    this.set("portfolio", Value.fromBytes(value));
  }

  get shares(): BigInt {
    let value = this.get("shares");
    return value!.toBigInt();
  }

  set shares(value: BigInt) {
    this.set("shares", Value.fromBigInt(value));
  }

  get investedUsdc(): BigInt {
    let value = this.get("investedUsdc");
    return value!.toBigInt();
  }

  set investedUsdc(value: BigInt) {
    this.set("investedUsdc", Value.fromBigInt(value));
  }
}

export class NdaoEntityFirstIndexedBlock extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save NdaoEntityFirstIndexedBlock entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type NdaoEntityFirstIndexedBlock must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "NdaoEntityFirstIndexedBlock",
        id.toBytes().toHexString(),
        this
      );
    }
  }

  static load(id: Bytes): NdaoEntityFirstIndexedBlock | null {
    return changetype<NdaoEntityFirstIndexedBlock | null>(
      store.get("NdaoEntityFirstIndexedBlock", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get endOfBlockBalance(): BigInt {
    let value = this.get("endOfBlockBalance");
    return value!.toBigInt();
  }

  set endOfBlockBalance(value: BigInt) {
    this.set("endOfBlockBalance", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get eventBalanceDelta(): BigInt {
    let value = this.get("eventBalanceDelta");
    return value!.toBigInt();
  }

  set eventBalanceDelta(value: BigInt) {
    this.set("eventBalanceDelta", Value.fromBigInt(value));
  }
}
