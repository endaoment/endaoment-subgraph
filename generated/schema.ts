// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ExampleEntity extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ExampleEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type ExampleEntity must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ExampleEntity", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): ExampleEntity | null {
    return changetype<ExampleEntity | null>(
      store.get("ExampleEntity", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value!.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get newAuthority(): Bytes {
    let value = this.get("newAuthority");
    return value!.toBytes();
  }

  set newAuthority(value: Bytes) {
    this.set("newAuthority", Value.fromBytes(value));
  }
}

export class NdaoEntity extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NdaoEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type NdaoEntity must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NdaoEntity", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): NdaoEntity | null {
    return changetype<NdaoEntity | null>(
      store.get("NdaoEntity", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get entityType(): string {
    let value = this.get("entityType");
    return value!.toString();
  }

  set entityType(value: string) {
    this.set("entityType", Value.fromString(value));
  }

  get entityManager(): Bytes {
    let value = this.get("entityManager");
    return value!.toBytes();
  }

  set entityManager(value: Bytes) {
    this.set("entityManager", Value.fromBytes(value));
  }

  get recognizedUsdcBalance(): BigInt {
    let value = this.get("recognizedUsdcBalance");
    return value!.toBigInt();
  }

  set recognizedUsdcBalance(value: BigInt) {
    this.set("recognizedUsdcBalance", Value.fromBigInt(value));
  }

  get totalUsdcDonationsReceived(): BigInt {
    let value = this.get("totalUsdcDonationsReceived");
    return value!.toBigInt();
  }

  set totalUsdcDonationsReceived(value: BigInt) {
    this.set("totalUsdcDonationsReceived", Value.fromBigInt(value));
  }

  get totalUsdcGrantsReceived(): BigInt {
    let value = this.get("totalUsdcGrantsReceived");
    return value!.toBigInt();
  }

  set totalUsdcGrantsReceived(value: BigInt) {
    this.set("totalUsdcGrantsReceived", Value.fromBigInt(value));
  }

  get totalUsdcContributionsReceived(): BigInt {
    let value = this.get("totalUsdcContributionsReceived");
    return value!.toBigInt();
  }

  set totalUsdcContributionsReceived(value: BigInt) {
    this.set("totalUsdcContributionsReceived", Value.fromBigInt(value));
  }

  get totalUsdcTransfersReceived(): BigInt {
    let value = this.get("totalUsdcTransfersReceived");
    return value!.toBigInt();
  }

  set totalUsdcTransfersReceived(value: BigInt) {
    this.set("totalUsdcTransfersReceived", Value.fromBigInt(value));
  }

  get totalUsdcGrantedOut(): BigInt {
    let value = this.get("totalUsdcGrantedOut");
    return value!.toBigInt();
  }

  set totalUsdcGrantedOut(value: BigInt) {
    this.set("totalUsdcGrantedOut", Value.fromBigInt(value));
  }

  get totalUsdcPaidOut(): BigInt {
    let value = this.get("totalUsdcPaidOut");
    return value!.toBigInt();
  }

  set totalUsdcPaidOut(value: BigInt) {
    this.set("totalUsdcPaidOut", Value.fromBigInt(value));
  }
}
