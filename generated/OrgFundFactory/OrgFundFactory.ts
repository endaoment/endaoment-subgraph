// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class EntityDeployed extends ethereum.Event {
  get params(): EntityDeployed__Params {
    return new EntityDeployed__Params(this);
  }
}

export class EntityDeployed__Params {
  _event: EntityDeployed;

  constructor(event: EntityDeployed) {
    this._event = event;
  }

  get entity(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get entityType(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get entityManager(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class OrgFundFactory extends ethereum.SmartContract {
  static bind(address: Address): OrgFundFactory {
    return new OrgFundFactory("OrgFundFactory", address);
  }

  ETH_PLACEHOLDER(): Address {
    let result = super.call(
      "ETH_PLACEHOLDER",
      "ETH_PLACEHOLDER():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_ETH_PLACEHOLDER(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "ETH_PLACEHOLDER",
      "ETH_PLACEHOLDER():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  baseToken(): Address {
    let result = super.call("baseToken", "baseToken():(address)", []);

    return result[0].toAddress();
  }

  try_baseToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("baseToken", "baseToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  computeFundAddress(_manager: Address, _salt: Bytes): Address {
    let result = super.call(
      "computeFundAddress",
      "computeFundAddress(address,bytes32):(address)",
      [
        ethereum.Value.fromAddress(_manager),
        ethereum.Value.fromFixedBytes(_salt)
      ]
    );

    return result[0].toAddress();
  }

  try_computeFundAddress(
    _manager: Address,
    _salt: Bytes
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "computeFundAddress",
      "computeFundAddress(address,bytes32):(address)",
      [
        ethereum.Value.fromAddress(_manager),
        ethereum.Value.fromFixedBytes(_salt)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  computeOrgAddress(_orgId: Bytes): Address {
    let result = super.call(
      "computeOrgAddress",
      "computeOrgAddress(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(_orgId)]
    );

    return result[0].toAddress();
  }

  try_computeOrgAddress(_orgId: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "computeOrgAddress",
      "computeOrgAddress(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(_orgId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deployFund(_manager: Address, _salt: Bytes): Address {
    let result = super.call(
      "deployFund",
      "deployFund(address,bytes32):(address)",
      [
        ethereum.Value.fromAddress(_manager),
        ethereum.Value.fromFixedBytes(_salt)
      ]
    );

    return result[0].toAddress();
  }

  try_deployFund(
    _manager: Address,
    _salt: Bytes
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deployFund",
      "deployFund(address,bytes32):(address)",
      [
        ethereum.Value.fromAddress(_manager),
        ethereum.Value.fromFixedBytes(_salt)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deployFundAndDonate(
    _manager: Address,
    _salt: Bytes,
    _amount: BigInt
  ): Address {
    let result = super.call(
      "deployFundAndDonate",
      "deployFundAndDonate(address,bytes32,uint256):(address)",
      [
        ethereum.Value.fromAddress(_manager),
        ethereum.Value.fromFixedBytes(_salt),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );

    return result[0].toAddress();
  }

  try_deployFundAndDonate(
    _manager: Address,
    _salt: Bytes,
    _amount: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deployFundAndDonate",
      "deployFundAndDonate(address,bytes32,uint256):(address)",
      [
        ethereum.Value.fromAddress(_manager),
        ethereum.Value.fromFixedBytes(_salt),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deployOrg(_orgId: Bytes): Address {
    let result = super.call("deployOrg", "deployOrg(bytes32):(address)", [
      ethereum.Value.fromFixedBytes(_orgId)
    ]);

    return result[0].toAddress();
  }

  try_deployOrg(_orgId: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall("deployOrg", "deployOrg(bytes32):(address)", [
      ethereum.Value.fromFixedBytes(_orgId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deployOrgAndDonate(_orgId: Bytes, _amount: BigInt): Address {
    let result = super.call(
      "deployOrgAndDonate",
      "deployOrgAndDonate(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(_orgId),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );

    return result[0].toAddress();
  }

  try_deployOrgAndDonate(
    _orgId: Bytes,
    _amount: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deployOrgAndDonate",
      "deployOrgAndDonate(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(_orgId),
        ethereum.Value.fromUnsignedBigInt(_amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  fundImplementation(): Address {
    let result = super.call(
      "fundImplementation",
      "fundImplementation():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_fundImplementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "fundImplementation",
      "fundImplementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  orgImplementation(): Address {
    let result = super.call(
      "orgImplementation",
      "orgImplementation():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_orgImplementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "orgImplementation",
      "orgImplementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  registry(): Address {
    let result = super.call("registry", "registry():(address)", []);

    return result[0].toAddress();
  }

  try_registry(): ethereum.CallResult<Address> {
    let result = super.tryCall("registry", "registry():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _registry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DeployFundCall extends ethereum.Call {
  get inputs(): DeployFundCall__Inputs {
    return new DeployFundCall__Inputs(this);
  }

  get outputs(): DeployFundCall__Outputs {
    return new DeployFundCall__Outputs(this);
  }
}

export class DeployFundCall__Inputs {
  _call: DeployFundCall;

  constructor(call: DeployFundCall) {
    this._call = call;
  }

  get _manager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _salt(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class DeployFundCall__Outputs {
  _call: DeployFundCall;

  constructor(call: DeployFundCall) {
    this._call = call;
  }

  get _fund(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class DeployFundAndDonateCall extends ethereum.Call {
  get inputs(): DeployFundAndDonateCall__Inputs {
    return new DeployFundAndDonateCall__Inputs(this);
  }

  get outputs(): DeployFundAndDonateCall__Outputs {
    return new DeployFundAndDonateCall__Outputs(this);
  }
}

export class DeployFundAndDonateCall__Inputs {
  _call: DeployFundAndDonateCall;

  constructor(call: DeployFundAndDonateCall) {
    this._call = call;
  }

  get _manager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _salt(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DeployFundAndDonateCall__Outputs {
  _call: DeployFundAndDonateCall;

  constructor(call: DeployFundAndDonateCall) {
    this._call = call;
  }

  get _fund(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class DeployFundSwapAndDonateCall extends ethereum.Call {
  get inputs(): DeployFundSwapAndDonateCall__Inputs {
    return new DeployFundSwapAndDonateCall__Inputs(this);
  }

  get outputs(): DeployFundSwapAndDonateCall__Outputs {
    return new DeployFundSwapAndDonateCall__Outputs(this);
  }
}

export class DeployFundSwapAndDonateCall__Inputs {
  _call: DeployFundSwapAndDonateCall;

  constructor(call: DeployFundSwapAndDonateCall) {
    this._call = call;
  }

  get _manager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _salt(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _swapWrapper(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _tokenIn(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _amountIn(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class DeployFundSwapAndDonateCall__Outputs {
  _call: DeployFundSwapAndDonateCall;

  constructor(call: DeployFundSwapAndDonateCall) {
    this._call = call;
  }

  get _fund(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class DeployOrgCall extends ethereum.Call {
  get inputs(): DeployOrgCall__Inputs {
    return new DeployOrgCall__Inputs(this);
  }

  get outputs(): DeployOrgCall__Outputs {
    return new DeployOrgCall__Outputs(this);
  }
}

export class DeployOrgCall__Inputs {
  _call: DeployOrgCall;

  constructor(call: DeployOrgCall) {
    this._call = call;
  }

  get _orgId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class DeployOrgCall__Outputs {
  _call: DeployOrgCall;

  constructor(call: DeployOrgCall) {
    this._call = call;
  }

  get _org(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class DeployOrgAndDonateCall extends ethereum.Call {
  get inputs(): DeployOrgAndDonateCall__Inputs {
    return new DeployOrgAndDonateCall__Inputs(this);
  }

  get outputs(): DeployOrgAndDonateCall__Outputs {
    return new DeployOrgAndDonateCall__Outputs(this);
  }
}

export class DeployOrgAndDonateCall__Inputs {
  _call: DeployOrgAndDonateCall;

  constructor(call: DeployOrgAndDonateCall) {
    this._call = call;
  }

  get _orgId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DeployOrgAndDonateCall__Outputs {
  _call: DeployOrgAndDonateCall;

  constructor(call: DeployOrgAndDonateCall) {
    this._call = call;
  }

  get _org(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class DeployOrgSwapAndDonateCall extends ethereum.Call {
  get inputs(): DeployOrgSwapAndDonateCall__Inputs {
    return new DeployOrgSwapAndDonateCall__Inputs(this);
  }

  get outputs(): DeployOrgSwapAndDonateCall__Outputs {
    return new DeployOrgSwapAndDonateCall__Outputs(this);
  }
}

export class DeployOrgSwapAndDonateCall__Inputs {
  _call: DeployOrgSwapAndDonateCall;

  constructor(call: DeployOrgSwapAndDonateCall) {
    this._call = call;
  }

  get _orgId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _swapWrapper(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenIn(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _amountIn(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class DeployOrgSwapAndDonateCall__Outputs {
  _call: DeployOrgSwapAndDonateCall;

  constructor(call: DeployOrgSwapAndDonateCall) {
    this._call = call;
  }

  get _org(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
